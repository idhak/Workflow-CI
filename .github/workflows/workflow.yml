name: ML Model CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 1. Checkout Repository
      uses: actions/checkout@v4
      
    - name: 2. Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: "3.9"
        activate-environment: "smsml-project"
        auto-update-conda: true
        
    - name: 3. Install Dependencies
      shell: bash -l {0}
      run: |
        conda env update -f MLProject/conda.yaml
        pip install jq  # Untuk parsing JSON
        
    - name: 4. Verify Data Directory
      working-directory: ./MLProject
      run: |
        echo "Checking data directory..."
        ls -l data_preprocessing/
        [ -f data_preprocessing/X_train_processed.csv ] || exit 1
        
    - name: 5. Run ML Training
      working-directory: ./MLProject
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        python modelling.py
        
    - name: 6. Get MLflow Run ID
      id: get-run-id
      working-directory: ./MLProject
      run: |
        RUN_ID=$(mlflow runs list --experiment-name "rf_experiment_tuning" --query "tags.mlflow.runName = 'RF_Tuned_Run'" -o json | jq -r '.[0].info.run_id')
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "Found Run ID: $RUN_ID"
        
    - name: 7. Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 8. Build & Push Docker Image
      if: steps.get-run-id.outputs.run_id != ''
      run: |
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/smsml-model:latest"
        mlflow models build-docker \
          --model-uri "runs:/${{ steps.get-run-id.outputs.run_id }}/rf_best_model" \
          --name "$IMAGE_NAME"
        docker push "$IMAGE_NAME"
        echo "Docker image pushed: $IMAGE_NAME"
        
    - name: 9. Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts
        path: |
          MLProject/data_preprocessing/
          MLProject/metric_info.json
