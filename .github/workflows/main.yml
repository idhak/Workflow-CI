name: Workflow CI Kriteria 3

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 1. Checkout Repository
      uses: actions/checkout@v4
      
    - name: 2. Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: "3.9"
        activate-environment: "smsml-project"
        auto-update-conda: true
        auto-activate-base: false
        
    - name: 3. Install Dependencies
      shell: bash -l {0}  # Critical: Use login shell
      run: |
        conda config --set channel_priority strict
        conda env update -n smsml-project -f MLProject/conda.yaml
        conda list
        
    - name: 4. Validate Data Files
      working-directory: ./MLProject
      shell: bash -l {0}  # Consistent shell
      run: |
        echo "Verifying data directory structure..."
        ls -l data_preprocessing/
        [ -f data_preprocessing/X_train_processed.csv ] || exit 1
        [ -f data_preprocessing/y_train.csv ] || exit 1
        
    - name: 5. Run Model Training
      working-directory: ./MLProject  # Tambahkan ini
      shell: bash -l {0}
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        conda activate smsml-project
        python -c "import os; print('MLflow Tracking URI:', os.getenv('MLFLOW_TRACKING_URI'))"
        python modelling.py  # Sekarang akan mencari file di direktori MLProject
        
    - name: 6. Retrieve MLflow Run ID
      id: mlflow-run
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        conda activate smsml-project
        
        # Dapatkan experiment ID terlebih dahulu
        EXP_ID=$(mlflow experiments list --format json | jq -r '.experiments[] | select(.name=="random_forest_experiment_with_tuning") | .experiment_id')
        
        if [ -z "$EXP_ID" ]; then
          echo "ERROR: Experiment not found"
          mlflow experiments list
          exit 1
        fi

        # Gunakan experiment ID untuk mencari run
        RUN_JSON=$(mlflow runs list --experiment-id $EXP_ID -o json)
        RUN_ID=$(echo "$RUN_JSON" | jq -r '.[] | select(.data.tags["mlflow.runName"] == "Tuned_Random_Forest") | .info.run_id')
        
        if [ -z "$RUN_ID" ]; then
          echo "ERROR: Run not found"
          echo "$RUN_JSON" | jq .
          exit 1
        fi
        
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "Retrieved Run ID: $RUN_ID"
        
    - name: 7. Docker Hub Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 8. Build and Push Docker Image
      if: steps.mlflow-run.outputs.run_id != ''
      run: |
        IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/workflow-ci-model:latest"
        mlflow models build-docker \
          --model-uri "runs:/${{ steps.mlflow-run.outputs.run_id }}/optimized_model" \
          --name "$IMAGE_NAME"
        docker push "$IMAGE_NAME"
        echo "Docker image pushed: $IMAGE_NAME"
        
    - name: 9. Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          MLProject/data_processing/
          MLProject/model_metrics.json
